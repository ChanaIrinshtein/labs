// SPDX-License-Identifier: MIT
pragma solidity >=0.6.12 <0.9.0;


contract Owner{

    address public owner;
    mapping (address => uint256) public balances;
    address[] public  owners;

    constructor(){
        owner=msg.sender;
        

    }
    receive()external payable {}

     function receiveit() external payable {
        balances[msg.sender] += msg.value;
    }

    modifier onlyOwner() {
     bool flag=false;
       for(uint i=0; i<owners.length ;i++){
       if(owners[i]==msg.sender){
         flag=true;
       }       
       }
        require(msg.sender == owner, "Only owner can call this function");
        _; 
    }
       
   function withdraw(uint256 num) payable  public onlyOwner{
     require(msg.sender == owner ,"WALLET-not-owner");
     payable(owner).transfer(num);
   }

   function getBalance() public view returns(uint){
    return address(this).balance;
   }

   function addOwner(address newOwner)public {
    require(owner==msg.sender,"");
    owners.push(newOwner);
  
   }
}
